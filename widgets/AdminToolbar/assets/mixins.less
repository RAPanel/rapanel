//
// Mixins
// --------------------------------------------------

// UTILITY MIXINS
// --------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
.clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
    // Fixes Opera/contenteditable bug:
    // http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
    line-height: 0;
  }
  &:after {
    clear: both;
  }
}

// Grid System
// -----------

// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  .clearfix();
}

// Table columns
.tableColumns(@columnSpan: 1) {
  float: none; // undo default grid column styles
  width: ((@gridColumnWidth) * @columnSpan) + (@gridGutterWidth * (@columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
.makeRow() {
  margin-left: @gridGutterWidth * -1;
  .clearfix();
}

.makeColumn(@columns: 1, @offset: 0) {
  float: left;
  margin-left: (@gridColumnWidth * @offset) + (@gridGutterWidth * (@offset - 1)) + (@gridGutterWidth * 2);
  width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
}

// The Grid
#grid {

  .core (@gridColumnWidth, @gridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      .span@{index} { .span(@index);
      }
      .spanX(@index - 1);
    }
    .spanX (0) {
    }

    .offsetX (@index) when (@index > 0) {
      .offset@{index} { .offset(@index);
      }
      .offsetX(@index - 1);
    }
    .offsetX (0) {
    }

    .offset (@columns) {
      margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 1));
    }

    .span (@columns) {
      width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));

    }

    .row {
      margin-left: @gridGutterWidth * -1;
      .clearfix();
    }

    [class*="span"] {
      float: left;
      min-height: 1px; // prevent collapsing columns
      margin-left: @gridGutterWidth;
    }

    // Set the container width, and override it for fixed navbars in media queries
    .container {
      margin-left: auto;
      margin-right: auto;
      .span(@gridColumns);
    }

    // generate .spanX and .offsetX
    .spanX (@gridColumns);
    .offsetX (@gridColumns);

  }

  .fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      .span@{index} { .span(@index);
      }
      .spanX(@index - 1);
    }
    .spanX (0) {
    }

    .offsetX (@index) when (@index > 0) {
      .offset@{index} { .offset(@index);
      }
      .offset@{index}:first-child { .offsetFirstChild(@index);
      }
      .offsetX(@index - 1);
    }
    .offsetX (0) {
    }

    .offset (@columns) {
      margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth*2);
      *margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + (@fluidGridGutterWidth*2) - (.5 / @gridRowWidth * 100 * 1%);
    }

    .offsetFirstChild (@columns) {
      margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth);
      *margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
    }

    .span (@columns) {
      width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
      *width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%);
    }

    .row-fluid {
      width: 100%;
      .clearfix();
      [class*="span"] {
        .input-block-level();
        float: left;
        margin-left: @fluidGridGutterWidth;
        *margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
      }
      [class*="span"]:first-child {
        margin-left: 0;
      }

      // Space grid-sized controls properly if multiple per line
      .controls-row [class*="span"] + [class*="span"] {
        margin-left: @fluidGridGutterWidth;
      }

      // generate .spanX and .offsetX
      .spanX (@gridColumns);
      .offsetX (@gridColumns);
    }

  }

  .input(@gridColumnWidth, @gridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      input.span@{index}, textarea.span@{index}, .uneditable-input.span@{index} { .span(@index);
      }
      .spanX(@index - 1);
    }
    .spanX (0) {
    }

    .span(@columns) {
      width: ((@gridColumnWidth) * @columns) + (@gridGutterWidth * (@columns - 1)) - 14;
    }

    input,
    textarea,
    .uneditable-input {
      margin-left: 0; // override margin-left from core grid system
    }

    // Space grid-sized controls properly if multiple per line
    .controls-row [class*="span"] + [class*="span"] {
      margin-left: @gridGutterWidth;
    }

    // generate .spanX
    .spanX (@gridColumns);

  }
}

.inline-block(@align: top) {
  display: inline-block;
  *display: inline;
  *zoom: 1;
  vertical-align: @align;
}

.rgba(@colour, @alpha) {
  @alphaColour: hsla(hue(@colour), saturation(@colour), lightness(@colour), @alpha);
  @ieAlphaColour: argb(@alphaColour);
  background-color: @colour;
  background-color: @alphaColour;
  // IE hacks
  zoom: 1;// hasLayout
  background-color: transparent\9;
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr= @{ieAlphaColour} , endColorstr= @{ieAlphaColour} )"; // IE 8+
  filter: ~"progid:DXImageTransform.Microsoft.gradient(startColorstr= @{ieAlphaColour} , endColorstr= @{ieAlphaColour })"; // IE 6 & 7
}

////-----------owned function----------------

.menuDecor(@textdecor:none, @colorLink:black) {
  text-decoration: @textdecor;
  color: @colorLink;
}

.linksDecor(@textdecor:underline, @colorLink:black, @sizeLink:0.7 ) {
  text-decoration: @textdecor;
  color: @colorLink;
  font-size: @fontSize*@sizeLink;

}

.redButton() {
  color: #ffffff;
  text-decoration: none;
  .gradient(linear-gradient(top bottom, #F21B00 0%,#C9203D 100%));
  &:hover {
    .gradient(linear-gradient(top bottom, #DA1800 0%,#B51D37 100%));
  }
  &:active {
    .gradient(linear-gradient(top bottom, #B01400 0%,#93172D 100%));
  }
}

.blueButton() {
  color: #ffffff;
  text-decoration: none;
  .gradient(linear-gradient(top bottom, #0E97E6 0%,#155CA9 100%));
  &:hover {
    .gradient(linear-gradient(top bottom, #138DD4 0%,#084E99 100%));
  }
  &:active {
    .gradient(linear-gradient(top bottom, #0E75B0 0%,#0D4178 100%));
  }
}

.greyButton() {
  color: #000000;
  text-decoration: none;
  .gradient(linear-gradient(top bottom, #ffffff 0%,#999999 100%));
  &:hover {
    .gradient(linear-gradient(top bottom, #E6E6E6 0%,#808080 100%));
  }
  &:active {
    .gradient(linear-gradient(top bottom, #cccccc 0%,#808080 100%));
  }
}

.colorSearch() {
  input[type="search"]::-webkit-input-placeholder {
    color: #808080;
  }
  input[type="search"]:-moz-placeholder {
    color: #808080;
  }
}

.gray() {
  filter: gray; /* IE 5+ */
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayscale=1)"; /* new IE */
  -webkit-filter: url(#gray); /* Chrome ?? */
  -webkit-filter: grayscale(1);
  filter: url(#gray);
}

.graynone() {
  filter: none;
  -webkit-filter: none;
  -ms-filter: none;
}
